import { h } from '../airship.core.js';

import { a as borderStyleCounts } from './chunk-512e386e.js';

const MIN_WIDTH = 16;
class LegendColorCategory {
    render() {
        if (!this.data || this.data.length === 0) {
            return null;
        }
        const wrapper = {
            'as-legend-category--wrapper': true,
            'as-legend-category--wrapper-horizontal': this.orientation === 'horizontal'
        };
        return h("div", { style: this.getStyle(), class: wrapper }, this.data
            .map((e) => this.renderLegend(e))
            .filter((e) => e !== null)
            .map((e) => h("div", { class: 'as-legend-category--entry' }, e)));
    }
    renderLegend(legend) {
        switch (legend.type) {
            case 'point':
                return h("as-legend-category-point-entry", { label: legend.label, width: this.width || legend.width, color: legend.color, strokeColor: legend.strokeColor, marker: legend.marker, strokeStyle: legend.strokeStyle });
            case 'line':
                return h("as-legend-category-line-entry", { label: legend.label, width: legend.width, color: legend.color, strokeStyle: legend.strokeStyle });
            case 'polygon':
                return h("as-legend-category-polygon-entry", { label: legend.label, color: legend.color, strokeColor: legend.strokeColor, strokeStyle: legend.strokeStyle });
            default:
                return null;
        }
    }
    getStyle() {
        const maxLegendWidth = this.data.slice().sort((first, second) => second.width - first.width)[0].width;
        return {
            '--as--basic--legend--figure-width': `${this.width || Math.max(maxLegendWidth, MIN_WIDTH)}px`
        };
    }
    static get is() { return "as-legend-category"; }
    static get properties() { return {
        "data": {
            "type": "Any",
            "attr": "data"
        },
        "orientation": {
            "type": String,
            "attr": "orientation"
        },
        "width": {
            "type": Number,
            "attr": "width"
        }
    }; }
    static get style() { return "as-legend-category{--as--basic--legend--font:var(--as--font--caption);--as--basic--legend--text-transform:capitalize;display:block}as-legend-category .as-legend-category--wrapper{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-wrap:wrap;flex-wrap:wrap}as-legend-category .as-legend-category--label{font:var(--as--basic--legend--font);text-transform:var(--as--basic--legend--text-transform)}as-legend-category .as-legend-category--figure--wrapper{width:var(--as--basic--legend--figure-width);margin-right:8px}as-legend-category .as-legend-category--wrapper-horizontal>.as-legend-category--entry{margin-right:12px}as-legend-category .as-legend-category--wrapper:not(.as-legend-category--wrapper-horizontal)>.as-legend-category--entry:not(:first-child){margin-top:12px}as-legend-category .as-legend-category--wrapper-horizontal{-ms-flex-direction:row;flex-direction:row;-ms-flex-align:center;align-items:center}"; }
}

const MAX_WIDTH = 16;
class LegendCategoryLineEntry {
    constructor() {
        this.strokeStyle = 'solid';
        this.width = 1.5;
    }
    componentWillLoad() {
        this._widthChanged(this.width);
    }
    render() {
        return (h("div", { class: 'as-legend-category-line-entry--wrapper' },
            h("div", { class: 'as-legend-category--figure--wrapper' },
                h("div", { class: 'as-legend-category-line-entry--line', style: this.getStyle() })),
            h("span", { class: 'as-legend-category--label' }, this.label)));
    }
    _widthChanged(newValue) {
        this._width = Math.min(MAX_WIDTH, newValue);
    }
    getStyle() {
        return {
            borderTopColor: this.color,
            borderTopStyle: this.strokeStyle,
            borderTopWidth: `${this._width}`
        };
    }
    static get is() { return "as-legend-category-line-entry"; }
    static get properties() { return {
        "_width": {
            "state": true
        },
        "color": {
            "type": String,
            "attr": "color"
        },
        "label": {
            "type": String,
            "attr": "label"
        },
        "strokeStyle": {
            "type": String,
            "attr": "stroke-style"
        },
        "width": {
            "type": Number,
            "attr": "width",
            "watchCallbacks": ["_widthChanged"]
        }
    }; }
    static get style() { return "as-legend-category-line-entry .as-legend-category-line-entry--wrapper{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}as-legend-category-line-entry .as-legend-category-line-entry--line{width:16px;height:0;margin:auto}"; }
}

const FAKE_BORDER_SIZE = 1;
const DEFAULT_WIDTH = 16;
const SYMBOL_OFFSET = 2;
class LegendCategoryPointEntry {
    constructor() {
        this.width = DEFAULT_WIDTH;
    }
    render() {
        const classes = {
            'as-legend-category-point-entry--point': !this.marker,
            'as-legend-category-point-entry--symbol': true
        };
        return (h("div", { class: 'as-legend-category-point-entry--wrapper' },
            h("div", { class: 'as-legend-category--figure--wrapper' },
                h("div", { class: classes, style: this.getStyle() })),
            h("span", { class: 'as-legend-category--label' }, this.label)));
    }
    getStyle() {
        return Object.assign({ backgroundColor: this.color, border: `${FAKE_BORDER_SIZE}px ${this.strokeStyle || 'solid'} ${this.strokeColor}` }, this.getWidth(), this.getMask());
    }
    getWidth() {
        if (!this.width) {
            return {};
        }
        let sizeOffset = borderStyleCounts(this.strokeStyle)
            ? FAKE_BORDER_SIZE * 2
            : 0;
        if (this.marker) {
            sizeOffset += SYMBOL_OFFSET;
        }
        return {
            height: `${this.width + sizeOffset}px`,
            width: `${this.width + sizeOffset}px`
        };
    }
    getMask() {
        if (!this.marker) {
            return {};
        }
        return {
            '-webkit-mask-image': `url(${this.marker})`,
            '-webkit-mask-position': 'center',
            '-webkit-mask-repeat': 'no-repeat',
            '-webkit-mask-size': `${this.width}px`,
            'maskImage': `url(${this.marker})`,
            'maskPosition': 'center',
            'maskRepeat': 'no-repeat',
            'maskSize': `${this.width}px`
        };
    }
    static get is() { return "as-legend-category-point-entry"; }
    static get properties() { return {
        "color": {
            "type": String,
            "attr": "color"
        },
        "label": {
            "type": String,
            "attr": "label"
        },
        "marker": {
            "type": String,
            "attr": "marker"
        },
        "strokeColor": {
            "type": String,
            "attr": "stroke-color"
        },
        "strokeStyle": {
            "type": String,
            "attr": "stroke-style"
        },
        "width": {
            "type": Number,
            "attr": "width"
        }
    }; }
    static get style() { return "as-legend-category-point-entry .as-legend-category-point-entry--wrapper{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}as-legend-category-point-entry .as-legend-category-point-entry--symbol{width:100%;height:auto;margin:auto}as-legend-category-point-entry .as-legend-category-point-entry--point{border-radius:50%}"; }
}

class LegendColorCategoryPolygonEntry {
    render() {
        return (h("div", { class: 'as-legend-category-polygon-entry--wrapper' },
            h("div", { class: 'as-legend-category--figure--wrapper' },
                h("div", { class: 'as-legend-category-polygon-entry--box', style: this.getStyle() })),
            h("span", { class: 'as-legend-category--label' }, this.label)));
    }
    getStyle() {
        return {
            backgroundColor: this.color,
            border: `1px ${this.strokeStyle || 'solid'} ${this.strokeColor}`
        };
    }
    static get is() { return "as-legend-category-polygon-entry"; }
    static get properties() { return {
        "color": {
            "type": String,
            "attr": "color"
        },
        "label": {
            "type": String,
            "attr": "label"
        },
        "strokeColor": {
            "type": String,
            "attr": "stroke-color"
        },
        "strokeStyle": {
            "type": String,
            "attr": "stroke-style"
        }
    }; }
    static get style() { return "as-legend-category-polygon-entry .as-legend-category-polygon-entry--wrapper{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}as-legend-category-polygon-entry .as-legend-category-polygon-entry--box{width:16px;height:12px;margin:auto}"; }
}

export { LegendColorCategory as AsLegendCategory, LegendCategoryLineEntry as AsLegendCategoryLineEntry, LegendCategoryPointEntry as AsLegendCategoryPointEntry, LegendColorCategoryPolygonEntry as AsLegendCategoryPolygonEntry };
