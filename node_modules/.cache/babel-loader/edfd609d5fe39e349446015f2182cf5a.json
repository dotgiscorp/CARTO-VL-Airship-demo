{"ast":null,"code":"export function applyPolyfill(window, document) {\n  /*!\n  whatwg-fetch, 2.0.3\n  https://github.com/github/fetch\n  Copyright (c) 2014-2016 GitHub, Inc. - MIT License\n  */\n  (function (e) {\n    function l(a) {\n      \"string\" !== typeof a && (a = String(a));\n      if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(a)) throw new TypeError(\"Invalid character in header field name\");\n      return a.toLowerCase();\n    }\n\n    function q(a) {\n      \"string\" !== typeof a && (a = String(a));\n      return a;\n    }\n\n    function n(a) {\n      var b = {\n        next: function () {\n          var b = a.shift();\n          return {\n            done: void 0 === b,\n            value: b\n          };\n        }\n      };\n      g.iterable && (b[Symbol.iterator] = function () {\n        return b;\n      });\n      return b;\n    }\n\n    function d(a) {\n      this.map = {};\n      a instanceof d ? a.forEach(function (a, c) {\n        this.append(c, a);\n      }, this) : Array.isArray(a) ? a.forEach(function (a) {\n        this.append(a[0], a[1]);\n      }, this) : a && Object.getOwnPropertyNames(a).forEach(function (b) {\n        this.append(b, a[b]);\n      }, this);\n    }\n\n    function p(a) {\n      if (a.bodyUsed) return Promise.reject(new TypeError(\"Already read\"));\n      a.bodyUsed = !0;\n    }\n\n    function r(a) {\n      return new Promise(function (b, c) {\n        a.onload = function () {\n          b(a.result);\n        };\n\n        a.onerror = function () {\n          c(a.error);\n        };\n      });\n    }\n\n    function w(a) {\n      var b = new FileReader(),\n          c = r(b);\n      b.readAsArrayBuffer(a);\n      return c;\n    }\n\n    function x(a) {\n      a = new Uint8Array(a);\n\n      for (var b = Array(a.length), c = 0; c < a.length; c++) b[c] = String.fromCharCode(a[c]);\n\n      return b.join(\"\");\n    }\n\n    function t(a) {\n      if (a.slice) return a.slice(0);\n      var b = new Uint8Array(a.byteLength);\n      b.set(new Uint8Array(a));\n      return b.buffer;\n    }\n\n    function u() {\n      this.bodyUsed = !1;\n\n      this._initBody = function (a) {\n        if (this._bodyInit = a) {\n          if (\"string\" === typeof a) this._bodyText = a;else if (g.blob && Blob.prototype.isPrototypeOf(a)) this._bodyBlob = a;else if (g.formData && FormData.prototype.isPrototypeOf(a)) this._bodyFormData = a;else if (g.searchParams && URLSearchParams.prototype.isPrototypeOf(a)) this._bodyText = a.toString();else if (g.arrayBuffer && g.blob && y(a)) this._bodyArrayBuffer = t(a.buffer), this._bodyInit = new Blob([this._bodyArrayBuffer]);else if (g.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(a) || z(a))) this._bodyArrayBuffer = t(a);else throw Error(\"unsupported BodyInit type\");\n        } else this._bodyText = \"\";\n        this.headers.get(\"content-type\") || (\"string\" === typeof a ? this.headers.set(\"content-type\", \"text/plain;charset=UTF-8\") : this._bodyBlob && this._bodyBlob.type ? this.headers.set(\"content-type\", this._bodyBlob.type) : g.searchParams && URLSearchParams.prototype.isPrototypeOf(a) && this.headers.set(\"content-type\", \"application/x-www-form-urlencoded;charset=UTF-8\"));\n      };\n\n      g.blob && (this.blob = function () {\n        var a = p(this);\n        if (a) return a;\n        if (this._bodyBlob) return Promise.resolve(this._bodyBlob);\n        if (this._bodyArrayBuffer) return Promise.resolve(new Blob([this._bodyArrayBuffer]));\n        if (this._bodyFormData) throw Error(\"could not read FormData body as blob\");\n        return Promise.resolve(new Blob([this._bodyText]));\n      }, this.arrayBuffer = function () {\n        return this._bodyArrayBuffer ? p(this) || Promise.resolve(this._bodyArrayBuffer) : this.blob().then(w);\n      });\n\n      this.text = function () {\n        var a = p(this);\n        if (a) return a;\n\n        if (this._bodyBlob) {\n          a = this._bodyBlob;\n          var b = new FileReader(),\n              c = r(b);\n          b.readAsText(a);\n          return c;\n        }\n\n        if (this._bodyArrayBuffer) return Promise.resolve(x(this._bodyArrayBuffer));\n        if (this._bodyFormData) throw Error(\"could not read FormData body as text\");\n        return Promise.resolve(this._bodyText);\n      };\n\n      g.formData && (this.formData = function () {\n        return this.text().then(A);\n      });\n\n      this.json = function () {\n        return this.text().then(JSON.parse);\n      };\n\n      return this;\n    }\n\n    function k(a, b) {\n      b = b || {};\n      var c = b.body;\n\n      if (a instanceof k) {\n        if (a.bodyUsed) throw new TypeError(\"Already read\");\n        this.url = a.url;\n        this.credentials = a.credentials;\n        b.headers || (this.headers = new d(a.headers));\n        this.method = a.method;\n        this.mode = a.mode;\n        c || null == a._bodyInit || (c = a._bodyInit, a.bodyUsed = !0);\n      } else this.url = String(a);\n\n      this.credentials = b.credentials || this.credentials || \"omit\";\n      if (b.headers || !this.headers) this.headers = new d(b.headers);\n      var v = b.method || this.method || \"GET\",\n          g = v.toUpperCase();\n      this.method = -1 < B.indexOf(g) ? g : v;\n      this.mode = b.mode || this.mode || null;\n      this.referrer = null;\n      if ((\"GET\" === this.method || \"HEAD\" === this.method) && c) throw new TypeError(\"Body not allowed for GET or HEAD requests\");\n\n      this._initBody(c);\n    }\n\n    function A(a) {\n      var b = new FormData();\n      a.trim().split(\"&\").forEach(function (a) {\n        if (a) {\n          var c = a.split(\"=\");\n          a = c.shift().replace(/\\+/g, \" \");\n          c = c.join(\"=\").replace(/\\+/g, \" \");\n          b.append(decodeURIComponent(a), decodeURIComponent(c));\n        }\n      });\n      return b;\n    }\n\n    function C(a) {\n      var b = new d();\n      a.replace(/\\r?\\n[\\t ]+/g, \" \").split(/\\r?\\n/).forEach(function (a) {\n        var c = a.split(\":\");\n        if (a = c.shift().trim()) c = c.join(\":\").trim(), b.append(a, c);\n      });\n      return b;\n    }\n\n    function h(a, b) {\n      b || (b = {});\n      this.type = \"default\";\n      this.status = void 0 === b.status ? 200 : b.status;\n      this.ok = 200 <= this.status && 300 > this.status;\n      this.statusText = \"statusText\" in b ? b.statusText : \"OK\";\n      this.headers = new d(b.headers);\n      this.url = b.url || \"\";\n\n      this._initBody(a);\n    }\n\n    if (!e.fetch) {\n      var D = \"Symbol\" in e && \"iterator\" in Symbol,\n          m;\n      if (m = \"FileReader\" in e && \"Blob\" in e) try {\n        new Blob(), m = !0;\n      } catch (a) {\n        m = !1;\n      }\n      var g = {\n        searchParams: \"URLSearchParams\" in e,\n        iterable: D,\n        blob: m,\n        formData: \"FormData\" in e,\n        arrayBuffer: \"ArrayBuffer\" in e\n      };\n\n      if (g.arrayBuffer) {\n        var E = \"[object Int8Array];[object Uint8Array];[object Uint8ClampedArray];[object Int16Array];[object Uint16Array];[object Int32Array];[object Uint32Array];[object Float32Array];[object Float64Array]\".split(\";\");\n\n        var y = function (a) {\n          return a && DataView.prototype.isPrototypeOf(a);\n        };\n\n        var z = ArrayBuffer.isView || function (a) {\n          return a && -1 < E.indexOf(Object.prototype.toString.call(a));\n        };\n      }\n\n      d.prototype.append = function (a, b) {\n        a = l(a);\n        b = q(b);\n        var c = this.map[a];\n        this.map[a] = c ? c + \",\" + b : b;\n      };\n\n      d.prototype[\"delete\"] = function (a) {\n        delete this.map[l(a)];\n      };\n\n      d.prototype.get = function (a) {\n        a = l(a);\n        return this.has(a) ? this.map[a] : null;\n      };\n\n      d.prototype.has = function (a) {\n        return this.map.hasOwnProperty(l(a));\n      };\n\n      d.prototype.set = function (a, b) {\n        this.map[l(a)] = q(b);\n      };\n\n      d.prototype.forEach = function (a, b) {\n        for (var c in this.map) this.map.hasOwnProperty(c) && a.call(b, this.map[c], c, this);\n      };\n\n      d.prototype.keys = function () {\n        var a = [];\n        this.forEach(function (b, c) {\n          a.push(c);\n        });\n        return n(a);\n      };\n\n      d.prototype.values = function () {\n        var a = [];\n        this.forEach(function (b) {\n          a.push(b);\n        });\n        return n(a);\n      };\n\n      d.prototype.entries = function () {\n        var a = [];\n        this.forEach(function (b, c) {\n          a.push([c, b]);\n        });\n        return n(a);\n      };\n\n      g.iterable && (d.prototype[Symbol.iterator] = d.prototype.entries);\n      var B = \"DELETE GET HEAD OPTIONS POST PUT\".split(\" \");\n\n      k.prototype.clone = function () {\n        return new k(this, {\n          body: this._bodyInit\n        });\n      };\n\n      u.call(k.prototype);\n      u.call(h.prototype);\n\n      h.prototype.clone = function () {\n        return new h(this._bodyInit, {\n          status: this.status,\n          statusText: this.statusText,\n          headers: new d(this.headers),\n          url: this.url\n        });\n      };\n\n      h.error = function () {\n        var a = new h(null, {\n          status: 0,\n          statusText: \"\"\n        });\n        a.type = \"error\";\n        return a;\n      };\n\n      var F = [301, 302, 303, 307, 308];\n\n      h.redirect = function (a, b) {\n        if (-1 === F.indexOf(b)) throw new RangeError(\"Invalid status code\");\n        return new h(null, {\n          status: b,\n          headers: {\n            location: a\n          }\n        });\n      };\n\n      e.Headers = d;\n      e.Request = k;\n      e.Response = h;\n\n      e.fetch = function (a, b) {\n        return new Promise(function (c, d) {\n          var e = new k(a, b),\n              f = new XMLHttpRequest();\n\n          f.onload = function () {\n            var a = {\n              status: f.status,\n              statusText: f.statusText,\n              headers: C(f.getAllResponseHeaders() || \"\")\n            };\n            a.url = \"responseURL\" in f ? f.responseURL : a.headers.get(\"X-Request-URL\");\n            c(new h(\"response\" in f ? f.response : f.responseText, a));\n          };\n\n          f.onerror = function () {\n            d(new TypeError(\"Network request failed\"));\n          };\n\n          f.ontimeout = function () {\n            d(new TypeError(\"Network request failed\"));\n          };\n\n          f.open(e.method, e.url, !0);\n          \"include\" === e.credentials ? f.withCredentials = !0 : \"omit\" === e.credentials && (f.withCredentials = !1);\n          \"responseType\" in f && g.blob && (f.responseType = \"blob\");\n          e.headers.forEach(function (a, b) {\n            f.setRequestHeader(b, a);\n          });\n          f.send(\"undefined\" === typeof e._bodyInit ? null : e._bodyInit);\n        });\n      };\n\n      e.fetch.polyfill = !0;\n    }\n  })(\"undefined\" !== typeof self ? self : window);\n}","map":null,"metadata":{},"sourceType":"module"}