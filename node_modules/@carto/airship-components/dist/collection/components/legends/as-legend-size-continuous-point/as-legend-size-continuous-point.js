import { borderStyleCounts } from '../../../utils/border-style-counts';
const FAKE_BORDER_SIZE = 1;
export class LegendSizeContinuousPoint {
    constructor() {
        this.orientation = 'vertical';
        this.scale = 1;
    }
    render() {
        if (!this.data) {
            return null;
        }
        const classes = {
            'as-legend-size-continuous-point--wrapper': true,
            [`as-legend-size-continuous-point--${this.orientation}`]: true
        };
        const sortedData = this.data.slice().sort((first, second) => second.width - first.width);
        this.maxSize = sortedData[0].width * this.scale;
        const size = {
            height: `${this.maxSize}px`,
            width: `${this.maxSize}px`
        };
        return h("div", { class: classes },
            h("span", { class: 'as-legend-size-continuous-point--label' }, sortedData[sortedData.length - 1].label),
            h("div", { style: size, class: 'as-legend-size-continuous-point--steps' }, sortedData.map((data) => this.renderStep(data))),
            h("span", { class: 'as-legend-size-continuous-point--label' }, sortedData[0].label));
    }
    renderStep(data) {
        const strokeStyle = `${FAKE_BORDER_SIZE}px ${data.strokeStyle || 'solid'} ${data.strokeColor}`;
        const sizeOffset = borderStyleCounts(data.strokeStyle)
            ? FAKE_BORDER_SIZE * 2
            : 0;
        const size = `${Math.round((data.width + sizeOffset) * this.scale)}px`;
        const style = {
            backgroundColor: data.color,
            border: strokeStyle,
            height: size,
            width: size,
        };
        return h("div", { class: 'as-legend-size-continuous-point--circle', style: style });
    }
    static get is() { return "as-legend-size-continuous-point"; }
    static get properties() { return {
        "data": {
            "type": "Any",
            "attr": "data"
        },
        "orientation": {
            "type": String,
            "attr": "orientation"
        },
        "scale": {
            "type": Number,
            "attr": "scale"
        }
    }; }
    static get style() { return "/**style-placeholder:as-legend-size-continuous-point:**/"; }
}
